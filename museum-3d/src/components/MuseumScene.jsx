import React, { useRef, useState, useEffect } from "react";
import { Canvas, useThree } from "@react-three/fiber";
import { OrbitControls, Plane, useGLTF, Environment  } from "@react-three/drei";
import { gsap } from "gsap";
import Room from "./Room";
import Navigation from "./Navigation";

// Component ch√≠nh
const MuseumScene = () => {
  const doorRef = useRef(); // Tham chi·∫øu ƒë·∫øn c√°nh c·ª≠a
  const [entered, setEntered] = useState(false); // Ki·ªÉm tra ƒë√£ v√†o b·∫£o t√†ng ch∆∞a
  const [currentRoom, setCurrentRoom] = useState(0); // Ph√≤ng hi·ªán t·∫°i
  const [selectedObject, setSelectedObject] = useState(null); // L∆∞u hi·ªán v·∫≠t ƒë∆∞·ª£c ch·ªçn
  return (
    <div style={{ width: "100vw", height: "100vh", background: "radial-gradient(circle, #2C003E, #000000)"}}>
        {/* N·∫øu ƒë√£ v√†o b·∫£o t√†ng th√¨ hi·ªÉn th·ªã n√∫t chuy·ªÉn ph√≤ng */}
      {entered && <Navigation currentRoom={currentRoom} setCurrentRoom={setCurrentRoom} />}
      <Canvas camera={{ position: [0, 2, 10] }}>
        {/* D√πng HDR ƒë·ªÉ thay ƒë·ªïi m√¥i tr∆∞·ªùng √°nh s√°ng */}
        {/* <Environment files="/hdr/night_sky.hdr" background /> */}

        <CameraController doorRef={doorRef} setEntered={setEntered}  setCurrentRoom={(room) => setCurrentRoom(room)} />
        {/* N·∫øu ch∆∞a v√†o b·∫£o t√†ng th√¨ hi·ªÉn th·ªã c·ª≠a */}
        {!entered && <DoorModel doorRef={doorRef} />}
        {/* N·∫øu ƒë√£ v√†o b·∫£o t√†ng th√¨ hi·ªÉn th·ªã ph√≤ng */}
        {entered && <Room roomId={currentRoom} setSelectedObject={setSelectedObject}/>}
        {/* Cho ph√©p xoay camera b·∫±ng chu·ªôt */}
        {!selectedObject && <OrbitControls minPolarAngle={Math.PI / 3} maxPolarAngle={Math.PI / 1.5} />}
        <Scene doorRef={doorRef} entered={entered} />
      </Canvas>
      
    </div>
  );
};

// üìå ƒêi·ªÅu khi·ªÉn Camera
const CameraController = ({ doorRef, setEntered, setCurrentRoom }) => {
  const { camera } = useThree();

  useEffect(() => {
    const handleScroll = (event) => {
      if (!setEntered) return;

      gsap.to(camera.position, {
        z: camera.position.z - event.deltaY * 0.01, // Ti·∫øn v√†o b·∫£o t√†ng
        duration: 0.5,
        onUpdate: () => {
          // Khi camera ƒë√£ ti·∫øn qua c·ª≠a, l√†m m·ªù ho·∫∑c ·∫©n c·ª≠a
          if (camera.position.z < 2) {
            if (doorRef.current) { // üî• Ki·ªÉm tra n·∫øu doorRef t·ªìn t·∫°i
              gsap.to(doorRef.current.scale, { x: 0, y: 0, z: 0, duration: 1 }); // L√†m m·ªù c·ª≠a
            }
            setEntered(true);
            setCurrentRoom(1); // Chuy·ªÉn v√†o ph√≤ng 1
          }
        },
      });
    };

    window.addEventListener("wheel", handleScroll);
    return () => window.removeEventListener("wheel", handleScroll);
  }, [camera, setEntered, setCurrentRoom]);

  return null;
};

// üìå Scene ch√≠nh
const Scene = ({ doorRef, entered }) => {
  return (
    <>
      <ambientLight intensity={0.5} />
      <pointLight position={[10, 10, 10]} />

      {/* S√†n b·∫£o t√†ng */}
      <Plane rotation={[-Math.PI / 2, 0, 0]} args={[50, 50]}>
        <meshStandardMaterial color="lightgray" />
      </Plane>

      {/* M√¥ h√¨nh b·∫£o t√†ng */}
      {/* <MuseumModel /> */}

      {/* C√°nh c·ª≠a b·∫£o t√†ng */}
      {!entered && <DoorModel doorRef={doorRef} />}

      {/* Gi·ªõi h·∫°n xoay camera */}
      <OrbitControls minPolarAngle={Math.PI / 2} maxPolarAngle={Math.PI / 2} />
    </>
  );
};

// üìå T·∫£i m√¥ h√¨nh b·∫£o t√†ng
// const MuseumModel = () => {
//   const { scene } = useGLTF("/models/museum.glb"); // ƒê∆∞·ªùng d·∫´n ƒë·∫øn m√¥ h√¨nh b·∫£o t√†ng
//   return <primitive object={scene} scale={1.5} position={[0, 0, 0]} />;
// };

// üìå T·∫£i m√¥ h√¨nh c√°nh c·ª≠a
const DoorModel = ({ doorRef }) => {
  const { scene } = useGLTF("/models/old_brown_wooden_historical_door.glb"); // ƒê∆∞·ªùng d·∫´n ƒë·∫øn m√¥ h√¨nh c√°nh c·ª≠a
  return <primitive ref={doorRef} object={scene} scale={1} position={[0.5, -1.5, 5]} />;
};

export default MuseumScene;
